pipeline {

    agent any

    options
            {
                ansiColor('xterm')
                timeout(time: 1, unit: 'HOURS')
            }

    stages
            {
                stage('ADB Connect')
                        {
                            steps
                                    {
                                        sh "${env.WORKSPACE}/adb-connect.sh"
                                    }
                        }

                stage('Update Device SQL')
                        {
                            steps
                                    {
                                        sh "${env.WORKSPACE}/devices.sh"
                                    }
                        }

                stage('Build')
                        {
                            steps
                                    {
                                        sh "mvn -f ${env.WORKSPACE}/hackathon-parent/pom.xml clean install -q -DskipTests"
                                    }
                        }

                stage('SonarQube Analytics')
                        {
                            steps
                                    {
                                        sh "mvn -f ${env.WORKSPACE}/hackathon-parent/pom.xml install " +
                                                "-DskipTests sonar:sonar " +
                                                "-Dsonar.projectKey=TestHackhaton " +
                                                "-Dsonar.projectVersion=58.0.$BUILD_NUMBER " +
                                                "-Dsonar.host.url=http://sonar:9000 " +
                                                "-Dsonar.login=e66760e81b350ab317aedcba5824148f3c3cf918 "
                                    }
                        }

                stage('Run Tests')
                        {
                            steps
                                    {
                                        script
                                                {
                                                    FORK = sh(returnStdout: true, script: 'adb devices | grep -v devices | grep device | cut -f 1 | wc -l | xargs')
                                                }

                                        sh "mvn -f ${env.WORKSPACE}/hackathon-android/pom.xml install " +
                                                "-Dappium.driver.local.service=true " +
                                                "-Dnode.path=/opt/node-v14.18.1-linux-x64/bin/node " +
                                                "-Dappium.path=/opt/node-v14.18.1-linux-x64/bin/appium " +
                                                "-Dandroid.home=/usr/lib/android-sdk " +
                                                "-Djira.open.issue=true " +
                                                "-Djunit.jupiter.execution.parallel.config.fixed.parallelism=${FORK}"
                                    }
                        }
            }

    post {
        always
                {
                    publishHTML(target: [allowMissing         : false,
                                         alwaysLinkToLastBuild: true,
                                         keepAll              : true,
                                         reportDir            : 'hackathon-android/target/',
                                         reportFiles          : 'HackathonReport.html',
                                         reportName           : 'Hackathon Extent Report',
                                         reportTitles         : 'Android Test Report'])
                }
    }
}
